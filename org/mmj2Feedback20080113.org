#+STARTUP: showeverything logdone
#+options: num:nil

Back to: [[file:mmj2.org][mmj2]] 

* note about the wiki

NOTE: To update the wiki your "username" must be whitelisted. Send an email to the wikilord if you are not already a user – and, if you don't care to do that, I authorize you to post as "ocat" for the purposes of mmj2 feedback and problem reports, etc. (Just put some initials on your edits so I know who is doing what…)

ALSO, you may get the "Cannot acquire main lock"
error message when attempting to post to the wiki.
In this case, hit the Back button on your browser,
open a new window and go to RecentChanges then
click on Administration, then Unlock Wiki. Wait,
and then return to your original post and click
on "submit" again. 


* other links

Dedicated page for feedback about the mmj2 Proof Assistant GUI: [[file:mmj2ProofAssistantFeedback.org][mmj2ProofAssistantFeedback]]

Previous version of mmj2Feedback: [[file:mmj2FeedbackV20070716.org][mmj2FeedbackV20070716]]

---

* mmj2 -- ruminations about It (and how It got this way :-)

---

1. The mmj2 Proof Assistant GUI is written using the Java
   "Swing" classes, but it makes as little use as possible
   of standard GUI features. It is a bare-bones GUI, 
   a Volkswagon, not a BMW or a Winnebago.

 * I discovered something about Swing: I do not like it,
  especially the way it is layered on top of AWT. The
  essential nature of Swing is one reason I chose to
  define the GUI interface as one large text blob
  (a "JTextArea" in Swing terminology). A future project,
  such as, hypothetically, "mmj3" would not use Swing.
 
 * The fact that the GUI *is* a ginormous text blob 
  proved to be very handy for testing purposes, and
  convenient as a way to store a proof in progress
  (a "Proof Worksheet" in mmj2 terminology). mmj2 makes
  extensive use of "batch" testing capabilities that
  are built into it on an equal footing with the GUI
  and nearly every feature of "proof assistanting" is
  testable without invoking the GUI screen -- instead
  text file(s) are read and processed (and generated.)
  The average user doesn't see this batch testing
  capability -- or even appreciate the value of it, 
  perhaps -- but regression testing improves quality.

---

2. mmj2 is written in Java, which is surprisingly a
  very good language for something like mmj2 which
  involves a *lot* of complicated computations. 

 * The extensive error-checking that is built into Java,
  such as ArrayOutOfBoundsException and NullPointerException
  is really quite valuable -- as is the ABEND reporting
  which kicks out source code line numbers of the call
  chain at the point of failure. 

 * Java is a strongly typed language, and I like that.
  Untold number of execution-time bug discoveries (by me)
  were shifted by Java to compile errors. In many cases
  a compile is as good as a test -- if it compiles, it
  works. In theory, I suppose, it could be argued that
  writing lots of code is bad and that modules should be
  so small, elegant and tightly crafted that type errors
  do not happen. But in "applications programming" 
  (as opposed to "systems programming" or whatever), 
  reusability is not the primary goal -- though it is
  a nice thing to have; the goal is getting the job done.
  Or as Douglas Adams "Hitchhiker" says, "My job is
  to do my job, which is to do my job." In a large system
  modules get interconnected and it is *really* nice to
  find out about type mismatches at compile time. Plus,
  after writing code for months or years, it is inevitable
  that at times the programmer becomes tired, sleepy
  or inattentive; sure, a super-genius wired on coffee
  and adrenaline, focused like a hawk on a mousey bit of
  code will never make a typing error...but wait till
  he gets bored with the project :0-)

---

3. One weird and experimental thing about mmj2 is that
   it stores formulas and statements as sequences of
   *references* to objects, not as sequences of characters.
   Literally! For example, when set.mm is loaded into
   memory, there is only *one* ")" symbol (and one "("
   symbol.) So, in a manner that is sure to flummox,
   annoy or boggle the average reader, the mmj2 code
   is studded with comparisons to MObj's like this:
   "if (mSym == nSym)", instead of "if (mSym.equals(nSym))".

 * The price paid for storing formulas and statements as
  sequences of references to objects is that mmj2 cannot
  take advantage of hardwired machine logic for many
  string operations. And that is costly. Also, capabilities
  that mmj2 does not have become inconvenient when all users
  must refer to a single object (not even just /instances/
  of an object, but a single object!) 

 * A nice advantage of using references to objects instead of
  having to constantly look up, "What does '?' mean again?"
  is that when an MObj is in hand, all information known
  about it is instantly available as a memory reference (which
  is even faster than subscripting.)

 * Curiously, during the work I discovered that, in many
  ways it would have been even better to store formulas
  and statements as trees -- and not even retain in memory
  the sequences of references to objects. The drawback
  to doing this would be that, say, an unparseable formula
  in the input .mm file could not be stored in memory.
  But as a practical matter now, if the input .mm file
  has grammar or syntax errors, mmj2 refuses to initiate
  the Proof Assistant. *Everything* interesting seems to
  require a tree representation, including formula
  formatting!

---

4. A couple of people have asked, "Why is it so big?" That
  is an interesting, though relative question. 

 * mmj2 makes a serious attempt to validate its input as near
  to the source as possible. And it attempts to report exact
  error conditions back to the user. For example, it doesn't
  just report that "line 10 is invalid", or "line 10 has
  a syntax error", but it breaks it down as precisely as
  possible to report, "invalid Metamath token", or "token
  invalid as a variable name", etc. Sometimes people write
  code that just assumes valid input, or defers validation
  to first use. That can result in difficult to diagnose
  bugs later on. For mmj2, at the point of greatest distance
  from the input -- the Point of Greatest Abstraction -- 
  the code can safely assume that the *data* is valid
  and just use it (though still, a programming error may
  result in a null pointer.)

 * mmj2 was written in phases, with each phase delivering
  a set of capabilities: read a .mm file; parse .mm
  statements; verify proofs; etc. If each of these features
  were integrated then the code size could be reduced.

 * mmj2 was written as an experiment and there are latent
  capabilities that the user does not see in normal use.
  For example, the Grammatical Parser can return 0->n
  parse trees, but in normal use it is asked to return
  either 0 or 1 parse trees. But via a RunParm it is
  possible to perform the "ExtendedAmbiguityChecking"
  and mmj2 will check every input statement to see if
  it is ambiguous -- if it has more than one parse tree.
  (In theory, the Proof Assistant could do this extended
  ambiguity checking to see if any proof step formula
  is ambiguous, but the code for that was not added.)

 * Source code size was not one of the "criteria for
  success". At a certain point, theorizing gives way
  to just punching in code as fast as possible to
  deliver something that works without regard for
  how it will appear later to detached observers :-)

 * mmj2 attempts to be absolutely faithful to the Metamath.pdf
  specification. It validates *every* Metamath syntax
  rule and implements every feature of the Metamath language.
  For example, mmj2 implements "include files" which are
  not even used now by [[file:norm.org][norm]]; it can handle included
  include files to any depth, and even checks for
  recursive includes (an error). mmj2 is, in fact, more
  punctilious about the Metamath.pdf syntax rules than
  metamath.exe :-) Other "features" of the Metamath.pdf
  specification are implicit -- they are inherent
  characteristics of the .mm syntax. mmj2 implements these
  *or* it kicks out an error message if the input file
  does not conform to mmj2's view of the world. Type
  Conversion Syntax Axioms can be chained to any degree
  and mmj2 checks for recursive type conversions (an
  error). And these behaviors are not hardcoded into
  the mmj2 source -- it does not have a clue about
  "set" or "class", nada. Other people have defined
  variants of the Metamath .mm language, but mmj2 accepts
  and attacks it like a hobo on a ham sandwich :-)

--- 

5. I asked myself, "Why did it take so long to reach this
   level of functionality? Nearly two years have gone by
   since the first release of mmj2!"

The first release of mmj2 on Aug-29-2005 contained just
syntactic parsing and bootstrap creation of a Grammar
from an input .mm file. In theory the requirements of
all subsequent versions could have been determined 
by pure analysis at that point. The Proof Assistant GUI,
the GUI "Derive" feature, Text-Mode Formula Formatting (TMFF),
"soft" $d error handling with generation of $d statements,
and Work Variables -- perhaps this could all have been 
invented and coded in one shot. But part of that functionality
was implemented as a result of user suggestions based on
trying a working version of mmj2. For example, Raph suggested
the "Derive" feature after trying the GUI, and the Work
Variables enhancement finished what the Derive feature 
enhancement failed to adequately cover (*that* was an
actual analysis error!)

In large, complicated systems choices must be made about
which features are most useful and necessary. Given 
perfect analysis and superior intelligence all of these
choices can be made correctly without experimentation.
Unfortunately, I could not *see* the final end result
before programming; so mmj2 shows my limitations.
In my defense (self-justificatory pats on back), 
discoveries were required... Looking at this another
way, a valid computer program is a proof that one's
ideas and thoughts about the subject matter are
correct; perhaps, then, a phased development approach
is best when the subject matter requires discovery!

---

6. One of the most elegant and beautiful aspects of
Metamath is that the Metamath .mm language uses the
same syntax to define Syntax Axioms and Logic Axioms.
This not only allows a user to define her own 
meta-language, and makes a .mm file self-defining,
but it means that syntax and logic have parallel
structures: parse trees and proof trees have the
same structure! In fact, set.mm contains an instance
of a "syntax proof" -- a $p statement whose first
formula symbol is "wff", in effect, "proving" that
a formula can be generated using the previous syntax
axioms...

What the parallel structure of syntax and logic
also means is that given an unambiguous grammar (i.e.
each formula has at most one syntactic parse tree),
because we know that two identical parse trees
have identical corresponding formulas, we also 
know that successful unification of a proof step
showing that the step's conclusion and hypotheses are
an instance of the justifying assertion (Ref)
means that the proof step is valid. 

Yes! the unification algorithms are logically equivalent
to the Metamath stack-based, RPN Proof Verification
algorithm, except for $d checking. This was
not self-evident at the beginning of the project :-)

---


7. A very interesting feature of the Metamath language
is the $d statement -- the "Disjoint-variable
Restriction" statement. The $d statement is used by
Metamath to obviate the need for consideration of free
vs. bound variables when performing substitutions (as
in "replacing all free occurrences of 'x' with 'y').

The definition of $d's is simple yet precise, and can
be traced back theoretically to Alfred Tarski's paper,
"A Simplified Formulation of Predicate Calculus With
Identity".

From the Metamath.pdf, page 96:

"The full meaning is that if any substitution is made
to its two variables (during the course of a proof
that references a $a or $p statement associated with
the $d), the two expressions that result from the
substitution must have no variables in common. In
addition, each possible pair of variables, one from
each expression, must be in a $d statement associated
with the statement being proved. (This requirement
forces the statement being proved to “inherit” the
original disjoint variable restriction.)"

The beauty and elegance of the $d idea in the context
of Metamath goes beyond the free vs. bound topic
because the Metamath language enables the user define
his/her own syntax and grammar. Whereas the  "free vs.
bound" distinction is intimately tied to syntax, the
$d statement is completely orthogonal to syntax; $d's
are layered on top of the user defined syntax (and
$d's should not be supplied on Syntax Axioms!), and
need not be restricted to the familiar index or range
variable usages that are familiar to us from other
languages. Thus, incorporation of the $d concept in
the Metamath language makes Metamath more open-ended
-- or, conversely (looking at this another way), it
eliminates the need for the Metamath language to have
a mechanism for specifying whether or not or how a
variable in a syntax construction is bound (or free.)

And, as with other great inventors, the Metamath
inventor, Norm, strived to define the language with
the most economical set of rules possible. But, as we
see on page 105, complications to the $d definition
arise when the concept of "Frame" and "Extended Frame"
is introduced:

"A frame with a $p (provable) statement requires a
proof as part of the $p statement. Sometimes in a
proof we want to make use of temporary or dummy
variables that do not occur in the $p statement or its
mandatory hypotheses. To accommodate this we define an
extended frame as a frame together with zero or more
$d and $f statements that reference variables not
among the mandatory variables of the frame. Any new
variables referenced are called the optional variables
of the extended frame. If a $f statement references an
optional variable it is called an optional hypothesis,
and if one or both of the variables in a $d statement
are optional variables it is called an optional
disjoint-variable restriction. Properties 2, 3, and 4
for a frame also apply to an extended frame."

The Metamath.pdf attempts to reassure the reader on
Page 100, and this excerpt provides important
information about the original intent for $d's and
users:

"Since Metamath will always detect when $d statements
are needed for a proof, you don’t have to worry too
much about forgetting to put one in; it can always be
added if you see the error message above. If you put
in unnecessary $d statements, the worse that will
happen is that your theorem might not be as general as
it could be, and this may limit its use later on."

Now, finally, on the basis of the work done in mmj2 in
the 01-Jun-2007 and 01-Aug-2007 releases, I can state
this well-founded opinion: optional disjoint-variable
restrictions should be eliminated from Metamath. Here
is why:

 * Optional disjoint-variable restrictions serve no
mathematical or logical function. They are not 
inherited and it is impossible, by definition, for
a user to substitute into them and violate prior
$d restrictions.

 * The Metamath.pdf specification is actually
simplified by this change. The apparent complication
created by modifying the excerpt on Page 96 as follows
is inconsequential given the complexities that follow
on later: "In addition, each possible pair of
 *mandatory* variables, one from each expression, must
be in a $d statement associated with the statement
being proved."

 * The Page 96 definition is (falsely) over-simplified
because only *mandatory* $d's are inherited -- so
attempting to "simplify" the definition to the bare
minimum obscures an essential truth!

 * Elimination of optional $d's would reduce the size
of set.mm while improving the
readability/meaningfulness of the $d statements in the
file. In fact, the Metamath Proof Explored does not
display optional $d's (if my recollection is correct
on this point.)

 * Program coding, execution speed, and memory
requirements would not be adversely affected by
elimination of $d's. First, because only mandatory
$d's are inherited, each implementing program *must*
keep separate mandatory and optional $d lists;
eliminating optional $d lists is an improvement.
Second, restricting the Page 96 inheritance definition
to pairs of *mandatory* variables could be done on an
exception basis during Proof Verification -- meaning
that the $d list check is done first and only if NOT
FOUND results does the program check to see if "x" and
"y" are both mandatory; if not, then no error message
ensues. Finally, memory utilization is reduced by
eliminatio of optional $d's because compound $d
statements are split into "atomic" (variable pair) $d
statements internally, often resulting in a
combinatorial explosion -- which would be eliminated
for the eliminated optional $d's.

 * The 01-Jun-2007 release of mmj2 showed that
mandatory $d statements can be re-derived for all
theorems in an input .mm file using the axioms' $d
statements. In fact, updates to several theorems to
eliminate superfluous mandatory $d's were submitted to
Norm. So, in a sense, mandatory $d's are a logical
consequence of a theorem's proof. However, in some
portions of set.mm, for the sake of conciseness,
superfluous $d staements are used. For example "$d x y
z t $." might be intentionally used even though z and
t need not be disjoint. But the same arguments cannot
be made about optional $d statements -- which cannot
be present on an axiom by definition (axioms have no
proofs.)

 * The choice about which "dummy" or optional variable
names to use in a proof is somewhat arbitrary. As long
as no "hard" $d errors result from a substitution
(violation of the referenced assertion's mandatory $d
statements), the choice of optional variables used is
up to the author of the proof (Metamath even allows
nested reuse of a dummy variable name!) Thus, if any
program or user decides to change which dummy
variables are used in a proof, the theorem's optional
$d statements must also be updated -- even though they
serve no purpose. This has not been a significan
drawback until the advent of the 01-Aug-2007 release
of mmj2, which converts, upon proof completion, any
leftover Work Variables to dummy/optional variables;
in general, it is difficult for a program to make this
conversion to match a theorem's existing optional $d
statements (which would require, among other things,
merging "hard" $d error checking into the conversion
process.) In the future, the more that we want
automation and help in Metamath proof assistants, the
less we will desire the existence of optional $d
statements (Metamath.exe's proof assistant does not
perform $d checking at all, while mmj2 "solves" its
problem by providing the user the option to have
"replacement" or "differences" $d statements generated
upon proof completion.)

As a practical matter, elimination of optional
disjoint-variable restrictions could be done in a
phased basis. Announce that, say, on January 1, 2008
optional disjoint-variable restrictions will be
"deprecated" -- that ("soft") error messages will no
longer be generated as a result of their omission.
Then, make the change to Metamath.exe on that date,
and require that mmverify.py and mmj2 follow suit at
their convenience. Over time new theorems and their
proofs would not contain optional $d's, and if
desired, code could be written to eliminate them from
existing .mm databases. Simple :-)

--- 

That is all I feel like talking about today...
but there are many other things that interest me
about mmj2 (and "mmj3"). --[[file:ocat.org][ocat]] 21-Jul-2007


* mmj2 appears to work ok on the Mac OS X

(subject to "Issues" below).

It is necessary to manually download and
install the Apple "J2SE 5.0 Release 4"
because even OS X 10.4.10 arrives with only
Java 1.4.2 installed. 

Curiously, it seems that J2SE 5.0 Release
4 must be installed (first) even though 
J2SE 5.0 Release 5 is available. The Apple
Update instructions are not entirely clear
on this point, IMO. My guess is that Release
4 contains something that changes the default
Java version in use. After Release 4 is installed
the obvious next step is to download the +80MB
Release 5 and install it -- that takes you from
Java 1.5.06 to Java 1.5.07 and eliminates some
bugs, etc. 


Issues:

-----

1. OS X uses path separator "/" instead of "\",
so RunParms .txt files need a few updates. For 
example:

In mmj2jar\RunParmsPATutorial.txt change

     
     ProofAsstStartupProofWorksheet,PATutorial\Page101.mmp
     

to

     
     ProofAsstStartupProofWorksheet,PATutorial/Page101.mmp

-----
    
2. OS X does not use absolute paths (drive letters) so
any file name references using drive letters must be
changed.

In mmj2jar\RunParms.txt change

     
     LoadFile,c:\metamath\set.mm 
     

to

     
     LoadFile,set.mm 

(assuming that you copy the Metamath set.mm file to the
current directory, "mmj2jar".)

-----
     
3. There is a "bug" which amounts to a difference
in the way the "ProofAsstProofFolder" RunParm builds
its (internal) path name. This RunParm sets the default
directory where user Proof Worksheets are stored. The
first time a "Save" or "SaveAs" is attempted with the
following RunParm in effect, the Save Dialog is initiated
at the top level directory of the hard drive instead
of the given directory:

     
    ProofAsstProofFolder,myproofs
     

Fortunately, after the first Save the (internal) path
is set correctly and the user does not need to
(re)navigate to the correct location. So this bug
amounts to a minor annoyance...and so it goes...

-----

4. I have not yet studied up on the Mac OS X system
and I have no idea what is the equivalent to the
Windows ".bat" file for storing commands (batch).
For now, to initiate mmj2 in OS X, fire up the
Applications/Utilities/Terminal application and
then "cd" to the "mmj2jar" directory (wherever you
installed it). Then ... using the TextEdit application
manually copy the "java ..." command line from the
mmj2jar/mmj2.bat file and paste it into the Terminal
window. Then press Enter. Here is the command:

    
    java -Xincgc -Xms64M -Xmx128M -jar mmj2.jar RunParms.txt
     

I don't believe the "-Xincgc" option is operative
in the OS X version of Java -- whether it uses Incremental
Garbage Collection by default, or not, I do not know...
this may not be a problem because the reason I added
the "-Xincgc" option was to avoid buggy parts of the
Sun Java environment (apparently Garbage Collection
is the hardest thing in the world to code properly.)
By doing garbage collection continuously instead of
waiting for a memory shortage, not only do we avoid
problematic execution paths (IMO), but the added
overhead is not discernable -- while eliminating the
chance of a noticable delay for a (non-incremental)
full sweep of the garbage.

-----

So, the bottom line based on a quick test and none of
the regression tests, is that mmj2 works "ok" in the
Max OS X environment, but it is a Rude Dog that needs
to be sent to obedience school... --[[file:ocat.org][ocat]] 9-Aug-2007

-----

Hello, I just compiled mmj2 on Eclipse running on my linux machine. It runs, but I have not had time to play around with it to test the functionality.

I have made a few changes on my local version, to get rid of many warnings Eclipse complained about when loading the source. There are still some warnings.
The stuff I fixed is related to typing the generics (List, Collection, etc.) used. If you are interested, I can send a patch somewhere.

Dan Getz. -- 9-Nov-2007

The Sun compiler generates warnings too, demanding that
the new "generics" are used. If you think it is important
to eliminate these warnings, then I can add the fixes to
the next version. I already have a couple of little
enhancements slated for inclusion, and with your contribution
we may have enough change to justify doing a Release. Do
you have an email address I can commo to? (Ghestalt seems
to be dead but I recall "alamedanet.net" something?)

--[[file:ocat.org][ocat]]

One of my addresses is getzdan, hosted on Yahoo mail.

Getz Dan

-----

* Questions/Comments About mmj2?
