#+STARTUP: showeverything logdone
#+options: num:nil

The new JHilbert work looks interesting, and it is also diverging in some ways from Ghilbert. Also, the Ghilbert design is evolving in ways that have mostly not been documented yet. Ideally I ([[file:raph.org][raph]]) would like to see the designs converge again, but perhaps there are legitimately different goals.

These are draft questions; I think I can figure most of it out by playing with the code.

**  Are def's sound?

:: /Update:/ (2009-07-17) I have created a soundness proof (with respect to [[file:metamath.org][metamath]]) at http://www.wikiproofs.de/w/index.php?title=Wikiproofs:JHilbert_definition_soundness
:: Sorry for not publishing the proof on this wiki, but I needed the TeX typesetting capability. If someone could peer-review (or peer-edit, for that matter) the proof, that would be great.
:: The description of JHilbert in the proof is not completely consistent with its current implementation. For one, JHilbert does not currently have DV constraints of definitions, only on statements. Of course, this does not affect soundness. A more serious matter is that some parts of the code are confused on which variables are apparent and which ones are occurring. That relates to a misconception which I had until recently that proper substitutions are well-defined on equivalence classes of expressions defined by definitions. (In fact, they are well-defined if applied to the standard representant of the equivalence class but that's not what the current "standard" implementation does.) I intend to fix that ASAP.
:: In any case, thanks, [[file:raph.org][raph]], for enticing me to this endeavour. It contained quite some eye-openers.
:: --[[file:GrafZahl.org][GrafZahl]]

I struggled a lot with the definition mechanism in Ghilbert, and ultimately troubles with it were a major motivation to scrap distinct variable conditions in favor of having the "free variable" concept baked into the metalogic. In general, there's a lot that can go wrong in a definitional mechanism coupled with Metamath.

The first place I'd look for problems is nonsensical definitions such as:

  def ((foo) x)

There are a lot of ways to get in trouble with such beasts. Unfortunately, I haven't built your code yet, so haven't tried constructing an inconsistency, but would not be surprised to find one - I think, for the most part, you're either going to have a clear argument why the definition mechanism is sound, or find unsoundness (and thanks again to Dan Krejsa for finding unsoundness in an earlier version of Ghilbert).

If you have multiple instances of a definition, do they all get the same internally generated dummy variables, or different ones? In the latter case, proofs of equality using eqid may fail. In the former case, 

I personally like the idea of introducing definitions as (fairly trivial) theorems to be proved, rather than just some form of macro expansion. Among other things, if you're gluing systems together, then often the two systems won't have the exact same definition, so what you export is a proof of the equivalence of the two definitions.

: Variables in JHilbert are a completely local matter. They are anonymised as soon as a command is completed. JHilbert makes a distinction between dummy variables, generated by variables in right-hand sides of definitions that do not appear in the respective left hand side, and other unnamed variables. Internally, there are two static atomic counters to enumerate them. So if you do, say

  def ((foo x) (= x y))

: the template for foo will become something like <code>(= (?12) (dummy34))</code>. Here, <code>(?12)</code> is an unnamed variable while <code>(dummy34)</code> is a dummy variable. Several instances of <code>foo</code> will have the same dummy variable. In fact, they will have the same functor (I call something a /functor/ if it's either defined by a def or by a term command), namely <code>foo</code>, only the expressions will be different. Now, where do these dummy variables pop up? Only when an expression whose head functor is a definition with dummies is unfolded. This can happen during param, import, export and in or at the end of proofs. Let's concentrate on the proofs for now. During unification, expressions may become unfolded and thus dummy variables may be introduced. Furthermore, at the end of the proof, the proof result and the consequent must be compared. This may lead to further unfoldings. In short: both proof result and consequent may contain dummy variables when they are finally compared.

: Now, in the case where proof result and consequent do /not/ contain dummy variables after unfolding, we want them to be equal in a term by term comparison. For example:

  Proof result: (= x x)
  Consequent:   (= x x)
  ===========
  Proof checks out!

  Proof result: (= x x)
  Consequent:   (= y y)
  ===========
  Proof fails because x and y are not the same

: In the case where there are dummies in proof result and consequent, we must allow for some mapping of different variables but want the simple non-dummy behaviour to be preserved as much as possible. Therefore, a blacklist is created before comparison. This blacklist contains all named variables appearing in the hypotheses and the consequent of the current theorem. These variables may only be mapped to themselves. Variables not in the blacklist (dummies or variables used in the proof which do not appear in the hypotheses or the consequent) may be mapped arbitrarily into each other, provided that

## the resulting relation is really a map,
## the resulting map is one-to-one.

: This ensures both proper substitution and that the proof result is really strong enough to justify later use of the theorem. For example, this is OK:

  def ((foo) x)
  thm (ok () () (= (foo) (foo)) (x eqid))

  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - VEquality check:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source expression: (= (foo) (foo))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target expression: (= x x)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded source:   (= (dummy0) (dummy0))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded target:   (= x x)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Blacklist:         []
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (= (dummy0) (dummy0))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (= x x)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (dummy0)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: x
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Adding mapping (dummy0) -> x to translation map
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (dummy0)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: x
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - First stage equality check succeeded
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Translation map: {(dummy0)=x}
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Second stage equality check succeeded

: This is not OK:

  def ((bar) x)
  thm (bad () () (= (foo) (bar)) (ok))

  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - VEquality check:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source expression: (= (foo) (bar))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target expression: (= (foo) (foo))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded source:   (= (dummy0) (dummy1))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded target:   (= (dummy0) (dummy0))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Blacklist:         []
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (= (dummy0) (dummy1))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (= (dummy0) (dummy0))
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (dummy0)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (dummy0)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Adding mapping (dummy0) -> (dummy0) to translation map
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (dummy1)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (dummy0)
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Adding mapping (dummy1) -> (dummy0) to translation map
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - First stage equality check succeeded
  2009-06-24 19:22:14 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Translation map: {(dummy1)=(dummy0), (dummy0)=(dummy0)}
  2009-06-24 19:22:14 [main] DEBUG jhilbert.expressions.impl.MatcherImpl - Translation map not one-to-one after VEquality check

: This is also not OK:

  thm (worse () () (= x y) (ok))

  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - VEquality check:
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source expression: (= x y)
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target expression: (= (foo) (foo))
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded source:   (= x y)
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Unfolded target:   (= (dummy0) (dummy0))
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Blacklist:         [y, x]
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: (= x y)
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (= (dummy0) (dummy0))
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Now comparing:
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Source: x
  2009-06-24 19:37:31 [main] TRACE jhilbert.expressions.impl.MatcherImpl - Target: (dummy0)
  2009-06-24 19:37:31 [main] ERROR jhilbert.scanners.impl.StreamTokenFeed - Attempt to prove result by illegal dummy assignment

: I should also mention something about the way dv constraints are handled in JHilbert. During the development of a proof, JHilbert collects all necessary dv constraints leading to the proof result. At the end, JHilbert checks if these collected dv constraints are actually a subset of the constraints the theorem will later promise to observe. But there is a catch: variables in dv constraints not appearing in the hypotheses or the consequent are ignored. So this is not OK:

  import (PROP pax/prop () ())
  import (ZFC zfc/set_mm_ax (PROP) ())

  var (wff ph ps)
  var (set x y)

  def ((foo) (-> ph (A. x ph)))

  thm (bar ((x ph)) () (foo) (
        ph x ax-17
  ))

: What happens here is that the instantiation <code>ph x ax-17</code> requires the constraint <code>(x ph)</code>. However, the constraint <code>(x ph)</code> of the <code>bar</code> theorem is ignored because neither its hypotheses (empty) nor its consequent (<code>foo</code>) contain the variables <code>x</code> or <code>phi</code> (hmm, JHilbert used to print a warning in such a case. Must have been lost somewhere down the road). Actually, <code>foo</code> is something like <code>-> (dummy0) (A. (dummy1) (dummy0))</code>.

: Fun fact: the checking of <code>set_mm.jh</code> raises the internal unnamed variable counter by more than 75,000.

: About definitions as theorems vs. macro expansion: "equivalence" theorems are essentially what exports enforce. On http://www.wikiproofs.de/w/index.php?title=Nicod's_reduction_of_Principia_Mathematica a very real example can be found. Each interface is a small world, which makes its own definitions, and when these definitions are incompatible, a naïve export will fail. Nicod uses the Sheffer stroke <code>|</code> (NAND in modern parlance) to define the standard truth functions <code>-.p</code>  as <code>p|p</code> and <code>p\/q</code> as <code>(p|p)|(q|q)</code>. In Principia Mathematica parlance, this generates implication, <code>p->q</code>, as <code>-.p\/q</code>, that is <code>((p|p)|(p|p))|(q|q)</code>. However, Nicod uses <code>p|(q|q)</code> for implication. So the definitions are incompatible and glue theorems are required. Funny thing is, Nicod himself was accused of having overlooked this incompatibility (an allegation which I personally find doubtful because Nicod provided all necessary transport theorems in his original paper with only one exception that the reader can fill in with relative ease). Also note that the concept of equivalence may be rather unofficial or even absent in some theories, while the use of macro expansion as abbreviation is more basic and perhaps more natural. On the other hand, if definitions are unfitting for some reason, stmts can be used instead (like in Metamath).

: --[[file:GrafZahl.org][GrafZahl]]

**  Will you have a cv term?

Another reason I decided to treat free variables explicitly is so I didn't have to put (cv x) terms in my proofs; they're ugly. But if you don't use a separate kind, then you can write things such as (A. (2) ph), which are also nonsensical.

: I have not come that far yet. Traditionally, first order mathematics has symbols for constants, symbols for variables, and the class builders, which make up the "primitive terms". The need to express this inclusion/partition would therefore be a consequence of the underlying mathematics. In this light, the need for "only" cv is already a major improvement. Also, stuff like (A. (2) ph) is not even allowed, strictly speaking.

: But all is not lost. I'm currently working on an improvement proposal for JHilbert which would allow a more general grammar. So instead of abolishing cv, we would simply make it invisible. In other words, where the grammar rule in question is now

  class: '(' 'cv' set ')'

: it would later simply become

  class: set

: I haven't checked whether such a reduction would raise some ambiguity which is not easily overcome. But since such an ambiguity would require some terminal to be allowed to be present around <code>set</code> and <code>class</code> in different contexts, my gut feeling says it should work.

: --[[file:GrafZahl.org][GrafZahl]]
