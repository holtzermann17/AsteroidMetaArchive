#+STARTUP: showeverything logdone
#+options: num:nil

(back to [[file:mmj2.org][mmj2]] )

* Proof Assistant GUI: Cursor Handling

Purpose:

To position the Proof Assistant GUI input "caret" and set the window's
vertical scroll position in the way that is most helpful for the user.

-----

Background Items:

The mmj2 Proof Assistant must control both the GUI screen window 
caret and view settings:

 * In Java the term "cursor" refers to the mouse pointer icon.
 * The term "caret" refers to the location where keyboard input will
  be inserted into the window text. Typically, when the user clicks
  the left mouse button on the Proof Assistant GUI text area, the
  caret's position is set to the current position of the mouse cursor.
 * The GUI's window has "scroll bars" that are used to move the
  displayed "view" of a proof up or down. The Proof Assistant GUI
  program must ensure that the contents of the window are scrolled
  so that the caret's location is visible -- if the caret's position
  is set by the program to a particular step of a proof
  corresponding to, say, the first error message, then that that
  step's location must be within the displayed view on the screen.

-----

Processing Rules:

 * When initially displaying a Proof Worksheet file following a 
  File/Open, File/Get Proof, File/Forward Get Proof or Backward 
  Get Proof -- before any editing -- position the caret to line 2, 
  column 1 and scroll the window to ensure that line 1, column 1 
  is visible.
 * When initially displaying a new proof (File/New), position the
  caret to column 1 of the first line of the dummy Derivation Step
  (with formula =  "|- ?") generated by the program; and scroll the
  window to ensure that column 1 of that line is guaranteed to be
  visible.
 * If possible the caret should be positioned to the first character
  of the first field in error on the screen, and the corresponding
  error message should be the first message appearing in the
  Messages window. Scroll the window so that Column 1 of the line
  containing the error is guaranteed to be visible.
 * If  field-level positioning is not possible, then the caret should
  be positioned to the first character of the first line of the step
  mentioned by the first error or informational message appearing in
  the Messages window.Scroll the window so that column 1 of the line
  referred to by the message is guaranteed to be visible.
 * After a reformat or font style or font family change (all invoke
  reformatting), position the caret at the first column of the first
  line of the proof statement (header, step, comment, or trailer) at
  which the user had positioned the caret when invoking the
  operation. Scroll the window so that column 1 of the first line of
  the proof statement where the caret is positioned is guaranteed to
  be visible. 
 * After File/Save, File/Save As, Edit/Copy, Edit/Cut, Edit/Paste or
  Help, do not adjust the caret or scroll positions.
 * If there are no errors or informational messages but the proof is
  not unified (and an RPN proof generated), then position the caret
  to column 1 of the first line of the first proof step that is
  incomplete (it will have status "Incomplete Hyps").Scroll the
  window so that column 1 of the caret position's line is guaranteed
  to be visible.
 * If the proof is successfully unified -- i.e. RPN proof is
  generated -- position the caret at the end of the proof text area
  and scroll the window so that the last line of the proof text area
  is guaranteed to be visible.


(back to [[file:mmj2.org][mmj2]] )

-----

OK, this looks great. When I first coded the Proof Assistant
I was focused on short proofs and cursor positioning did not
seem vitally important. But [[file:frl.org][frl]] and [[file:norm.org][norm]] have these
200 step proofs and without intelligent cursor positioning,
I don't think the GUI would be very useable -- imagine getting
an error message for step 100 and the cursor is set at 
the end of the proof, beyond step 200, so you have to page
up and try to find the step in question. Oy! 

So, looks like the major enhancements/fixes are in and 
now I just need to do system and volume testing, and documentation and
cleanup -- and create the jar distribution. I think that if
some better documentation is available, with maybe a few
diagrams, this will be a Very Good Thing...

--[[file:ocat.org][ocat]] 16-Sep-2006

I'm happy you are aware of our inner feelings :-) [[file:frl.org][frl]] 1--Sep-2006
